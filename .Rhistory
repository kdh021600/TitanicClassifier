1+1
x()
clear
clearPushBack
x()
quit()
n
getpwd()
getwd()
y
age <- randu()
age <- randu
age
clear
age <- [1:10]
ls()
history()
history
age <- sample(1:99, 10)
age
weight <- runif(10,20.0,90.0)
weight
mean(weight)
mean(age)
sd(age)
cor(age,weight)
plot(age,weight)
rm()
age
x <-runif(20)
x
ls()
rm(list=ls())
ls()
q()
c
x <- sample(1:10, 10)
x
()
q()
y
ls()
rm(list=ls())
q()
y
ls()
library()
install.packages()
library(grid)
ls()
history()
history(1)
q()
n
data()
data(trees)
ls()
trees
help(trees)
x <- 1:10
x
hlp(x)
help(x)
summary(x)
x <- 0:10
summary(x)
q()
n
q()
n
# Needed for OutOfMemoryError: Java heap space
library(rJava)
.jinit(parameters="-Xmx4g")
# If there are more memory problems, invoke gc() after the POS tagging
library(NLP)
library(openNLP)
library(openNLPmodels.en)
library(tm)
library(stringr)
library(SPARQL)
source('~/Projects/R/IntelligentSystems/NLP_HandsOn/handsOnHelpers4.R')
source.pos = DirSource("/Users/carlos/Projects/R/IntelligentSystems/NLP_HandsOn/review_polarity/txt_sentoken/pos/", encoding = "UTF-8")
corpus = Corpus(source.pos)
getwd()
setwd("/Users/carlos/Projects/R/IntelligentSystems/NLP_HandsOn/)
c)
;
setwd("/Users/carlos/Projects/R/TitanicClassifier/")
load("./.RData")
rpartFitCabin
finalVarsCabin <- c(2,3,5,6,7,8,10,11,12) # Final features
preData <- preData[finalVars]
preData <- preData[finalVarsCabin]
preData <- read.csv("./titanic.csv")
finalVarsCabin <- c(2,3,5,6,7,8,10,11,12) # Final features
preData <- preData[finalVarsCabin]
preData <- na.omit(preData$Age)
counts <- table(preData$Cabin)
preData <- read.csv("./titanic.csv")
preData <- preData[finalVarsCabin]
preData <- na.omit(preData$Age)
preData <- read.csv("./titanic.csv")
finalVarsCabin <- c(2,3,5,6,7,8,10,11,12) # Final features
preData <- preData[finalVarsCabin]
counts <- table(preData$Cabin)
s <- sapply(strsplit(as.character(preData$Cabin) , split="[^A-z]") , "[" , 1)
s[is.na(s)] <- as.character('NA')
s <- factor(s)
preData$Cabin <- s
preData <- na.omit(preData)
inTrainingCabin <- createDataPartition(preData$Survived, p = .75, list = FALSE)
trainingCabin <- preData[ inTrainingCabin,]
testingCabin <- preData[ -testingCabin,]
library(caret)
library(rpart)
library(rpart.plot)
library(e1071)
library(randomForest)
library(vcd)
inTrainingCabin <- createDataPartition(preData$Survived, p = .75, list = FALSE)
trainingCabin <- preData[ inTrainingCabin,]
testingCabin <- preData[ -testingCabin,]
testingCabin <- preData[ -inTrainingCabin,]
set.seed(825)
rpartFitCabin <- train(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Cabin + Embarked,
data = inTrainingCabin,
method = "rpartCost",
tuneGrid = rpartParams,
trControl = fitControl)
rpartFitCabin <- train(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Cabin + Embarked,
data = trainingCabin,
method = "rpartCost",
tuneGrid = rpartParams,
trControl = fitControl)
rpartFitCabin
set.seed(825)
rpartFitCabin <- train(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Cabin + Embarked,
data = trainingCabin,
method = "rpartCost",
tuneGrid = rpartParams,
trControl = fitControl)
rpartFitCabin
predictionCabin <- predict(rpartFitCabin, testingCabin)
confusionMatrix(predictionCabin, testingCabin$Survived)
